local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")

-- Webhook URL: This is now set externally
-- Users will define this variable outside the script.

-- Flags and cooldowns
local embedSent = false
local cooldownTime = 0.5 -- Cooldown time in seconds
local lastSentTime = 0 -- Timestamp of the last sent webhook
local logCooldownTime = 4 -- Cooldown time for logs
local lastLogTime = 0

-- Function to send a webhook with embed
local function sendWebhookWithEmbed(title, description, color)
    local payload = {
        ["embeds"] = {
            {
                ["title"] = title,
                ["description"] = description,
                ["color"] = color or 16711680 -- Default to red
            }
        }
    }

    local headers = {
        ["Content-Type"] = "application/json"
    }

    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = Webhook_URL, -- Make sure Webhook_URL is defined externally before using it
            Method = "POST",
            Headers = headers,
            Body = HttpService:JSONEncode(payload)
        })
    end)

    if success and response.StatusCode == 204 then
        print("Embed webhook sent successfully!")

        -- Send notification when webhook is sent
        local currentTime = os.date("%Y-%m-%d %H:%M:%S", tick())
        StarterGui:SetCore("SendNotification", {
            Title = "SEA HUB - Webhook Sent",
            Text = "The webhook has been successfully sent at " .. currentTime,
            Duration = 5,
            Button1 = "OK"
        })
    else
        warn("Failed to send embed webhook: " .. (response and response.StatusCode or "unknown error"))
    end
end

-- Function to collect stats and items
local function collectStats()
    local playerGui = Players.LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return {}, {}, {} end

    local rewardsInfo = playerGui:FindFirstChild("Interface") 
        and playerGui.Interface:FindFirstChild("Rewards")
        and playerGui.Interface.Rewards:FindFirstChild("Main")
        and playerGui.Interface.Rewards.Main:FindFirstChild("Info")
        and playerGui.Interface.Rewards.Main.Info:FindFirstChild("Main")

    if not rewardsInfo then return {}, {}, {} end

    local stats = rewardsInfo:FindFirstChild("Stats") or {}
    local items = rewardsInfo:FindFirstChild("Items") or {}

    local collectedStats = {}
    local collectedRewards = {}
    local collectedDrops = {}

    -- Gather stats
    for _, stat in pairs(stats:GetChildren()) do
        if stat:FindFirstChild("Amount") then
            collectedStats[stat.Name] = stat.Amount.Text
        end
    end

    -- Gather items (split into rewards and drops)
    for _, item in pairs(items:GetChildren()) do
        if item:FindFirstChild("Main") and item.Main:FindFirstChild("Inner") and item.Main.Inner:FindFirstChild("Quantity") then
            local quantity = item.Main.Inner.Quantity.Text
            if item.Name == "XP" or item.Name == "Gold" or item.Name == "Gems" then
                collectedRewards[item.Name] = quantity
            else
                collectedDrops[item.Name] = quantity
            end
        end
    end

    return collectedStats, collectedRewards, collectedDrops
end

-- Function to check if all Titans are gone
local function checkAllTitansGone()
    local titans = workspace.Titans:GetChildren()
    return #titans == 0 -- True if no Titans left
end

-- Queue on teleport (for supported environments)
local queueteleport = syn and syn.queue_on_teleport or queue_on_teleport or fluxus and fluxus.queue_on_teleport
if queueteleport then
    -- Replaced the loadstring as requested
    queueteleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/SEA-HUBZ/SEAHUB-LAB/main/SEAHUB",true))()')
end

-- Function to send stats, rewards, and drops as a webhook
local function sendStatsWebhook()
    local stats, rewards, drops = collectStats()

    if next(stats) == nil and next(rewards) == nil then
        print("No stats or rewards collected yet.")
        return
    end

    local description = "Stats:\n"
    for statName, statValue in pairs(stats) do
        description = description .. string.format("%s: %s\n", statName, statValue)
    end

    description = description .. "\nRewards:\n"
    for rewardName, rewardValue in pairs(rewards) do
        description = description .. string.format("%s: %s\n", rewardName, rewardValue)
    end

    description = description .. "\nDrops:\n"
    for dropName, dropValue in pairs(drops) do
        description = description .. string.format("%s: %s\n", dropName, dropValue)
    end

    sendWebhookWithEmbed("SEA HUB - Game Stats and Rewards", description, 65280) -- Green color
end

-- Main loop using RenderStepped with cooldown
RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    
    if checkAllTitansGone() then
        if not embedSent and (currentTime - lastSentTime >= cooldownTime) then
            print("Titans Found")
            sendStatsWebhook()
            embedSent = true
            lastSentTime = currentTime
            -- Wait 10 second after sending the webhook
            task.wait(10)
        end
    else
        print("Waiting for all Titans to be gone...")
        embedSent = false -- Reset flag when Titans are present
    end
end)
