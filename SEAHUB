local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Titans

-- Local queue teleport setup and remote execution from URL
local queueteleport = syn and syn.queue_on_teleport or queue_on_teleport or fluxus and fluxus.queue_on_teleport
if queueteleport then
    queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/SEA-HUBZ/SEAHUB-LAB/main/SEAHUB', true))()")
end

-- Flags and cooldowns
local embedSent = false
local cooldownTime = 0.5 -- Cooldown time in seconds
local lastSentTime = 0 -- Timestamp of the last sent webhook

-- Function to initiate Titan ripper logic
local function initTitanRipper()
    task.spawn(function()
        while true do
            if not Titans or not HumanoidRootPart then return end

            for _, titan in pairs(Titans:GetChildren()) do
                if titan:IsA("Model") then
                    for _, part in pairs(titan:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if part.Name == "Nape" then
                                -- Adjust the Nape size and position to workspace.Fake_Head
                                part.Size = Vector3.new(1000, 1000, 1000)
                                part.Position = workspace.Fake_Head.Position
                                part.CFrame = workspace.Fake_Head.CFrame
                            end
                            part.CanCollide = false
                        end
                    end
                end
            end
            task.wait(0.01)  -- Replaced with 0.01
        end
    end)

    task.spawn(function()
        while true do
            -- Wrapped the remote calls in pcall to catch and skip errors
            pcall(function()
                game:GetService("ReplicatedStorage").Assets.Remotes.GET:InvokeServer("S_Skills", "Usage", "23")
            end)
            pcall(function()
                game:GetService("ReplicatedStorage").Assets.Remotes.GET:InvokeServer("S_Skills", "Usage", "14")
            end)
            pcall(function()
                game:GetService("ReplicatedStorage").Assets.Remotes.GET:InvokeServer("Functions", "Retry", "Add")
            end)
            task.wait(0.01)  -- Replaced with 0.01
        end
    end)
end

-- Initialize Titan ripper
initTitanRipper()

-- Main loop using RenderStepped with cooldown
RunService.RenderStepped:Connect(function()
    local currentTime = tick()

    -- Ensure a cooldown is respected for sending logic
    if not embedSent and (currentTime - lastSentTime >= cooldownTime) then
        print("Sending Titan Ripper logic...")
        embedSent = true
        lastSentTime = currentTime
    end
    task.wait(0.01)  -- Replaced with 0.01
end)
